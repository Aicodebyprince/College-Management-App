import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'student.dart';

class AddStudentPage extends StatefulWidget {
  final Function(Student) onStudentAdded;

  const AddStudentPage({super.key, required this.onStudentAdded});

  @override
  _AddStudentPageState createState() => _AddStudentPageState();
}

class _AddStudentPageState extends State<AddStudentPage> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _rollNoController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  String _selectedYear = 'FY';
  String _selectedStream = 'BSC IT';

  Future<void> _registerStudent() async {
    final name = _nameController.text.trim();
    final email = _emailController.text.trim();
    final password = _passwordController.text.trim();
    final year = _selectedYear;
    final stream = _selectedStream;

    if (name.isEmpty || email.isEmpty || password.isEmpty) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Please fill all fields')));
      return;
    }

    int? rollNo = int.tryParse(_rollNoController.text.trim());
    if (rollNo == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter a valid roll number')),
      );
      return;
    }

    try {
      // ðŸ”¹ Check if student email already exists
      final emailDoc =
          await FirebaseFirestore.instance
              .collection('students')
              .doc(email) // Use email as document ID
              .get();

      if (emailDoc.exists) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Student email already exists')),
        );
        return;
      }

      // ðŸ”¹ Prevent duplicate roll numbers in the same stream and year
      final rollNoQuery =
          await FirebaseFirestore.instance
              .collection('students')
              .where('rollNo', isEqualTo: rollNo)
              .where('stream', isEqualTo: stream)
              .where('year', isEqualTo: year)
              .limit(1)
              .get();

      if (rollNoQuery.docs.isNotEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Roll number $rollNo already exists for $stream $year',
            ),
          ),
        );
        return;
      }

      // ðŸ”¹ Create user in Firebase Authentication
      final UserCredential userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);

      // ðŸ”¥ **DELETE auto-generated Firestore document** (if created by mistake)
      final autoGeneratedDocRef = FirebaseFirestore.instance
          .collection('students')
          .doc(userCredential.user?.uid);
      await autoGeneratedDocRef.delete().catchError((_) {});
      final uid = userCredential.user!.uid;

      // ðŸ”¹ Generate the streamYear field
      final streamYear = '$stream $year'; // Example: "BSC IT FY"

      // ðŸ”¹ Store student in Firestore using **email as the document ID**
      await FirebaseFirestore.instance.collection('students').doc(uid).set({
        'uid': uid,
        'name': name,
        'rollNo': rollNo,
        'year': year,
        'stream': stream,
        'streamYear': streamYear, // Add the new field here
        'email': email, // Use email as document ID
        'createdAt': FieldValue.serverTimestamp(),
      });

      // Notify parent widget
      widget.onStudentAdded(
        Student(
          name: name,
          rollNo: rollNo,
          year: year,
          email: email,
          stream: stream,
        ),
      );

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Student added successfully!')),
      );
      Navigator.pop(context);
    } on FirebaseAuthException catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Authentication Error: ${e.message}')),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error: ${e.toString()}')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add Student')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              TextField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Name',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _emailController,
                decoration: const InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                keyboardType: TextInputType.emailAddress,
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _rollNoController,
                decoration: const InputDecoration(
                  labelText: 'Roll Number',
                  border: OutlineInputBorder(),
                ),
                keyboardType: TextInputType.number,
              ),
              const SizedBox(height: 16),
              TextField(
                controller: _passwordController,
                decoration: const InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
                obscureText: true,
              ),
              const SizedBox(height: 20),
              DropdownButtonFormField<String>(
                value: _selectedStream,
                decoration: const InputDecoration(
                  labelText: 'Select Stream',
                  border: OutlineInputBorder(),
                ),
                items:
                    ['BSC IT', 'BSC Data Science']
                        .map(
                          (stream) => DropdownMenuItem(
                            value: stream,
                            child: Text(stream),
                          ),
                        )
                        .toList(),
                onChanged: (value) => setState(() => _selectedStream = value!),
              ),
              const SizedBox(height: 20),
              DropdownButtonFormField<String>(
                value: _selectedYear,
                decoration: const InputDecoration(
                  labelText: 'Select Year',
                  border: OutlineInputBorder(),
                ),
                items:
                    ['FY', 'SY', 'TY']
                        .map(
                          (year) =>
                              DropdownMenuItem(value: year, child: Text(year)),
                        )
                        .toList(),
                onChanged: (value) => setState(() => _selectedYear = value!),
              ),
              const SizedBox(height: 30),
              ElevatedButton(
                onPressed: _registerStudent,
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 40,
                    vertical: 15,
                  ),
                ),
                child: const Text(
                  'Add Student',
                  style: TextStyle(fontSize: 18),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
